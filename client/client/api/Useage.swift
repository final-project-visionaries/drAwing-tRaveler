import SwiftUI
import Alamofire

struct Useage: View {
    @State private var imagesData: [[String: Any]] = [] // 結果を格納するための変数を作成します。
    
    var body: some View {
        VStack {
            Button{
                print("ボタン押しました")
                //非同期関数を呼ぶ時のみTask(=async)でラッピングする
                Task {
                    let result = try await apiImageGetRequest()
                    for elm in result {
                        print("result : \(elm.image_name)")
                    }
                }
            }label:{Text("getメソッド")}
            
            //actionのvalueは関数でなければならない
            //引数を渡したい場合は、{}で括って、クロージャーの中で呼び出す
            Button(action: { () -> () in
                //postで渡す辞書型のデータを作る仮の関数（本番はフロントで作成）
                Task {
                    let tempData = getTempData()
                    //postリクエストを引数を渡して実行
                    let result = await apiImagePostRequest(reqBody: tempData)
                    print("result : \(result)")
                }
            }){Text("postメソッド")}
            
            Button(action: { () -> () in
                Task {
                    let result = await apiImageDeleteRequest(imageID: 105)
                    print("result : \(result)")
                }
            }){Text("deleteメソッド")}
            
            Button(action: { () -> () in
                Task {
                    let tempData = getTempData2()
                    let result = await apiImageUpdateReqest(reqBody: tempData, imageID: 41)
                    print("result : \(result)")
                }
            }){Text("updateメソッド")}
        }.padding()
    }
    
    //postで渡す辞書型のデータを作る仮の関数
    func getTempData() -> [String: String]{
        let parameters: [String: String] = [
            "image_name": "ハート",
            "image_data": "",
        ]
        return parameters
    }
    
    func getTempData2 () -> [String : String]{
        let temp = [
            "image_name" : "sadsadsadsad",
            "image_data" : "4QLbHMNtEa2+44YYbbrjhhhtuuOFZ8P/knqV3FzgJqgAAAABJRU5ErkJggg"
        ]
        return temp
    }
}

//#Preview {
//    Useage()
//}
